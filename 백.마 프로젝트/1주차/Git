## 개요
개발 프로젝트의 필수 요소인 버전관리를 도와주는 Git에 대해 설명한 글

## 키워드
버전관리

## 중요도
별 4개

## Git에 대해서

### 왜 Git을 쓰는 걸까?
다양한 개발 프로젝트에서 Git을 사용하고 있습니다. 왜 이렇게 Git은 개발자들에게 사랑을 받을까요? 답은 프로젝트의 단계별 버전을 쉽게 관리할 수 있기 때문입니다. 대학교에서 팀프로젝트를 해보셨다면 이런 파일 관리에 익숙하실 겁니다. `최종1`, `최종2`, `최종최종1` 등. 이러한 파일관리는 당사자가 아니면 헷갈릴 수 있어서 문제가 발생할 가능성이 높습니다.

Git의 원리도 사실 우리가 했던 저런 방식과 비슷하지만 조금 더 체계적인 방법을 사용합니다. 깃은 commit이라는 명령어를 통해서 파일의 스냅샷을 남깁니다. 스냅샷은 카메라로 그 순간의 전부를 기록하는 것처럼 어떤 파일의 그 순간의 버전을 기록한 파일입니다. 그럼 이 방법이 좋은 이유는 무엇이냐? 내가 스냅샷을 남기면 깃이 기억하고 있습니다. 다시말해 `최종1`, `최종2`, `최종최종1`을 내가 직접 만들 필요없고 나는 commit만 할 뿐 기록은 Git이 하고 있습니다. 사실 이 설명은 입문자분들에게는 헷갈릴 수 있습니다. 다만, Git의 복잡한 동작 원리를 몇 문장으로 표현하긴 어렵긴 합니다. 이 글의 본래 목적과도 다르기 때문입니다. Git의 원리에 대해서는 따로 공부하시는 것을 추천합니다. [책 추천 : 팀 개발을 위한 Git, Github 시작하기](http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&mallGb=KOR&barcode=9791162242032&orderClick=LEa&Kc=)

### 기능 단위 별 커밋
그럼 이제 커밋을 잘 한다는 의미와 좋은 커밋메세지를 남기는 법을 알아보자. 커밋을 하면 하는거지 왜 잘해야 할까? 우선 잘함의 기준은 의미있는 기능 단위 별로 커밋을 했느냐이다. 여러개의 기능을 한번에 구현한 후에 커밋을 하지 않고 하나의 기능을 완성하면 커밋하기를 추천한다는 의미이다. 게임을 예시로 들어보자.내 캐릭터의 현재 레벨은 10인데 20까지 올린 후에 게임 세이브를 하려고 결심했다. 그런데 19까지 올린 후에 몬스터한테 죽어서 다시 세이브 지점으로 가야하는 상황이 발생했다. 그러면 나는 최신 세이브 지점은 레벨 10부터 시작해야 한다. 만약 레벨이 1씩 오를 때마다 세이브를 했다면 레벨 19에서 죽었더라도 다시 19에서 시작할 수 있다.

이렇게 의미있는 단위 별로 커밋하면 기능의 수정이 발생할 때 쉽게 대처할 수 있다는 장점이 있다. 그러면 사람마다 의미있는 단위의 기준이 다를 텐데 객관적인 지표가 없을까? [참고 글 : commit하는 단위는 어떻게 하는 것이 좋을까요?](https://github.com/javajigi/minesweeper-ruby/issues/5) 이 글을 참고하니 단위 테스트 단위 별 커밋을 추천한다.

## 실전에 유용한 깃 명령어
### git stash
git stash 명령어는 기능 구현 중 커밋할 단계는 아닌데 다른 브랜치로 체크아웃해야 하는 상황에 유용합니다. stash 명령어를 모를 땐 어쩔 수 없이 commit을 한 후에 다른 브랜치로 checkout를 했습니다.

- 현재 변경 사항을 stash 스택에 쌓아두는 명령어. 명령어 수행 시 해당 브랜치는 clean한 상태가 된다.
```git
git stash
```

- stash 스택에 쌓인 마지막 stash 커밋을 꺼내오는 명령어
```git
git stash pop
```

- stash 스택을 비우는 명령어.
```git
git stash clear
```

## 결론
Git에 대해서 가볍게 살펴봤습니다. Git은 처음 배울 땐 어렵고 시간이 걸리지만 한번 배우면 개발자 경력 평생에 도움이 되는 기술입니다. 어렵다고 피하지 마시고 책 또는 강의를 통해 Git를 정복하시고 성장하는 개발자가 되시길 바라겠습니다.
