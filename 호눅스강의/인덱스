## 개요
인덱스, DB에 대한 호눅스 수업을 정리한 글

## 프로젝트 설명
- 어드민 개발은 신입사원에게 부여하는 과제 중 하나이다.
- 엘라스틱 서치, 솔라는 자바 기반 검색 기능이다. 엘라스틱 서치가 사용자 편의에 초점을 맞춘 기술이다.

## 공부 키워드
- mysql 벌크 인서트 : 파일을 한번에 테이블에 넣을 수 있는 기능

## Line 이야기
- 메신저 데이터를 처리하기 위해 Redis와 Hbase를 사용한다. Redis는 인메모리라서 영속성이 없다. 그래서 Hbase를 사용한다. 하둡기반 데이터베이스가 HBase이다.

## 다양한 DB를 한번씩 튜토리얼을 써보자.
- 토이프로젝트일 때 몽고DB를 사용하면 좋다. 몽고DB는 한 테이블로 모든 것을 관리할 수 있다.

## 실습
- csv파일을 생성한다.
- mysql에 csv 파일을 넣는다.
- 인덱스를 생성한다. 조회한다.

```java
import java.time.LocalDate;
import java.util.Random;
public class User {
    int id;
    String name;
    int rank;
    int money;
    LocalDate startDate;
    LocalDate lastLogin;
    static Random random = new Random();
    public User(String name) {
        this.id = (int)(Math.random() * 10) + 1;
        this.name = name;
        this.rank = (int)(Math.random() * 9) + 1;
        this.money = (int)(Math.random() * 99999998) + 1;
        LocalDate now = LocalDate.now();
        LocalDate start = LocalDate.of(2019, 1, 1);
        long number = random.nextInt(Math.toIntExact(now.toEpochDay()) - Math.toIntExact(start.toEpochDay()) + 1) + Math.toIntExact(start.toEpochDay());
        this.startDate = LocalDate.ofEpochDay(number);
        LocalDate login = LocalDate.of(2020, 4, 1);
        number = random.nextInt(Math.toIntExact(now.toEpochDay()) - Math.toIntExact(login.toEpochDay()) + 1) + Math.toIntExact(login.toEpochDay());
        this.lastLogin = LocalDate.ofEpochDay(number);
    }
    @Override
    public String toString() {
        return "User{" +
                "id=" + id +
                ", name='" + name + '\'' +
                ", rank=" + rank +
                ", money=" + money +
                ", startDate=" + startDate +
                ", lastLogin=" + lastLogin +
                '}';
    }
}
```

- csv 파일 db에 넣는법

```
LOAD DATA LOCAL INFILE '/home/hyunjun/Downloads/csvFile.csv' INTO TABLE csvdb.user FIELDS TERMINATED BY ',' LINES TERMINATED BY '\n';
```

- ec2에서 LOAD DATA 명령어 사용하는 법.
	- 우선 ec2에 csv 파일이 존재해야 한다.
	```
	mysql -u jack -p -h airbnb-07.csjhbz8c8oyh.ap-northeast-2.rds.amazonaws.com --local-infile airbnb -e "LOAD DATA LOCAL INFILE 'test_seattle_accommodation.csv' INTO TABLE accommodation FIELDS TERMINATED BY ',' LINES TERMINATED BY '\n'"
	```


### 인덱스 관련
- 디스크 기반 자료구조와 메모리 기반 자료구조의 차이는?

	- 디스크 기반 자료구조는 컴퓨터가 꺼져도 데이터가 존재한다. 반면 메모리 기반 자료구조는 컴퓨터가 꺼지면 데이터가 사라진다.

- BST는 어떤 자료구조이고 순회 방식은 몇 가지인가?

	- BST는 부모노드 기준으로 왼쪽 노드는 부모노드의 값보다 작은 값이 오른쪽 노드는 부모 노드의 값보다 큰 값이 들어가는 자료구조이다. 순회방식은 전위, 중위, 후위 3가지 방식이 있다.

- HashMaP과 BST의 차이는 무엇인가?

	- HashMap은 키와 값이 바로 연결되어 있어 평균적으로 O(1)이지만 BST은 키값에 맞는 값을 탐색하기 때문에 평균적으로 O(logn)이다.

- B-tree란 무엇인가?

	- 디비에서 검색을 편하게 해주는 자료구조이다. 파일에 읽고 쓸 수 있는 자료구조이다.

- Hash와 B-tree의 차이점은 무엇인가?

	- Hash는 조건 검색이 불가능하다.

- 인덱스란 무엇인가?

	- 데이터를 빠르게 검색할 수 있게 도와주는 자료구조이다.

- 참조무결성 제약조건은 무엇인가?

	- 자식 릴레이션의 외래키는 부모 릴레이션의 기본키와 도메인이 동일해야 하며, 자식 릴레이션의 값이 변경될 때 부모 릴레이션의 제약을 받는다는 것이다. 즉 부모 릴레이션의 도메인과 다른 값으로 삽입, 수정될 때 거부되고, 반대로 자식 릴레이션에서 참조하고 있는 값을 부모 릴레이션에서 삭제하거나 다른 값으로 변경하려고 하면 거부된다.

- InnoDB의 자료구는 어떤 자료구조이고 그에 대한 설명을 해보시오.

	- Clustered Index이다. Primary key에 대해서 B+ tree를 만들고 data가 순차적으로 연결되어 있다.

- RID란 무엇인가?

	- PK 인덱스에 저장된 value이다. page번호와 slot 번호가 적혀있다.

- 레코드를 저장하는 Page는 어떻게 생겼는가?

	- 16kb 크기 제한으로 레코드가 담겨져 있는데 마지막 칸에는 각 레코드가 시작되는 바이트 크기가 적힌 slot이 있다.. 단순히 RID 1,5로 찾기는 힘들다. 왜냐하면 각 레코드는 가변길이이기 때문이다.

- Secondary Index는 어떻게 동작하는가?

  - Key는 해당 인덱스이지만 value는 RID가 아니라 PK가 들어간다. 즉, PK 인덱스를 통해서 데이터에 접근한다.

- 인덱스를 사용하기 좋은 조건은 무엇인가? (Selectivity)

  - 데이터의 크기는 방대한데 매 검색하는 조건이 작은 경우 (전체 데이터의 10%)

- OLTP (Oneline Transactional Processing)과 OLAP(Analytical)의 차이는?

  - 트랜잭션(CRUD) 관련 데이터를 처리하는 프로세싱
  - 데이터를 분석하는 프로세싱



### 공부거리

- 커버링 인덱스란 무엇인가?
  -  SELECT, WHERE, ORDER BY, GROUP BY 등에 사용되는 모든 컬럼이 인덱스의 구성요소인 경우
  - 데이터로 접근하지 않고 인덱스로만 접근하기 때문에 쿼리 속도가 빠르다.
